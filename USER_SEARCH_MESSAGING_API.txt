================================================================================
                        USER SEARCH & MESSAGING API GUIDE
================================================================================

BASE URL: http://localhost:8082/api/v1
AUTHENTICATION: Bearer JWT token (STUDENT role required)

================================================================================
                           1. SEARCH USERS FOR MESSAGING
================================================================================

METHOD: GET
ENDPOINT: /search/users

PURPOSE: Search for users by username, email, or name to start conversations

PARAMETERS:
- q (required): Search query (username, email, or display name)
- page (default: 0): Page number
- size (default: 20): Items per page

REQUEST:
GET /search/users?q=john&page=0&size=10

RESPONSE:
{
  "success": true,
  "data": {
    "content": [
      {
        "id": 1,
        "username": "john_doe",
        "email": "john@example.com",
        "displayName": "John Doe",
        "profilePicture": null,
        "isOnline": true,
        "lastSeen": "2025-07-14T12:30:00"
      },
      {
        "id": 2,
        "username": "johnny_smith",
        "email": "johnny@example.com", 
        "displayName": "Johnny Smith",
        "profilePicture": null,
        "isOnline": false,
        "lastSeen": "2025-07-14T10:15:00"
      }
    ],
    "totalElements": 2,
    "totalPages": 1,
    "currentPage": 0,
    "size": 10,
    "first": true,
    "last": true,
    "empty": false
  }
}

CURL EXAMPLE:
curl -X GET "http://localhost:8082/api/v1/search/users?q=john&page=0&size=10" \
  -H "Authorization: Bearer <jwt-token>"

================================================================================
                           2. SEND MESSAGE TO USER
================================================================================

METHOD: POST
ENDPOINT: /messages

PURPOSE: Send a direct message to a user (creates conversation if doesn't exist)

REQUEST BODY:
{
  "recipientId": 2,
  "content": "Hi John! How are you doing?",
  "type": "TEXT"
}

FIELDS:
- recipientId (required): ID of the user to send message to
- content (required): Message content
- type (optional, default: TEXT): Message type - TEXT, IMAGE, FILE
- groupId (optional): Group ID if sending to group
- replyToId (optional): ID of message being replied to

RESPONSE:
{
  "success": true,
  "data": {
    "id": 1,
    "content": "Hi John! How are you doing?",
    "type": "TEXT",
    "senderId": 1,
    "recipientId": 2,
    "conversationId": 1,
    "isRead": false,
    "isEdited": false,
    "replyToId": null,
    "attachments": [],
    "sentAt": "2025-07-14T12:45:00",
    "readAt": null,
    "sender": {
      "id": 1,
      "username": "current_user",
      "displayName": "Current User"
    }
  },
  "message": "Message sent successfully"
}

CURL EXAMPLE:
curl -X POST http://localhost:8082/api/v1/messages \
  -H "Authorization: Bearer <jwt-token>" \
  -H "Content-Type: application/json" \
  -d '{
    "recipientId": 2,
    "content": "Hello! How are you?",
    "type": "TEXT"
  }'

================================================================================
                           3. GET USER CONVERSATIONS
================================================================================

METHOD: GET
ENDPOINT: /messages/conversations

PURPOSE: Get list of all conversations for current user

PARAMETERS:
- page (default: 0): Page number
- size (default: 20): Items per page

REQUEST:
GET /messages/conversations?page=0&size=10

RESPONSE:
{
  "success": true,
  "data": {
    "content": [
      {
        "id": 1,
        "participantIds": [1, 2],
        "participants": [
          {
            "id": 1,
            "username": "current_user",
            "displayName": "Current User"
          },
          {
            "id": 2,
            "username": "john_doe",
            "displayName": "John Doe"
          }
        ],
        "lastMessage": {
          "id": 5,
          "content": "Thanks for the help!",
          "senderId": 2,
          "sentAt": "2025-07-14T12:30:00"
        },
        "unreadCount": 2,
        "isGroup": false,
        "groupId": null,
        "createdAt": "2025-07-14T10:00:00",
        "updatedAt": "2025-07-14T12:30:00"
      }
    ],
    "totalElements": 5,
    "totalPages": 1,
    "currentPage": 0,
    "size": 10,
    "first": true,
    "last": true,
    "empty": false
  }
}

================================================================================
                         4. GET CONVERSATION MESSAGES
================================================================================

METHOD: GET
ENDPOINT: /messages/conversations/{conversationId}

PURPOSE: Get messages from a specific conversation

PARAMETERS:
- conversationId (path): ID of the conversation
- page (default: 0): Page number
- size (default: 50): Items per page
- before (optional): Get messages before this timestamp

REQUEST:
GET /messages/conversations/1?page=0&size=20

RESPONSE:
{
  "success": true,
  "data": {
    "content": [
      {
        "id": 5,
        "content": "Thanks for the help!",
        "type": "TEXT",
        "senderId": 2,
        "recipientId": 1,
        "conversationId": 1,
        "isRead": true,
        "isEdited": false,
        "replyToId": null,
        "attachments": [],
        "sentAt": "2025-07-14T12:30:00",
        "readAt": "2025-07-14T12:31:00",
        "sender": {
          "id": 2,
          "username": "john_doe",
          "displayName": "John Doe"
        }
      },
      {
        "id": 4,
        "content": "Sure, I can help you with that problem.",
        "type": "TEXT",
        "senderId": 1,
        "recipientId": 2,
        "conversationId": 1,
        "isRead": true,
        "isEdited": false,
        "replyToId": null,
        "attachments": [],
        "sentAt": "2025-07-14T12:25:00",
        "readAt": "2025-07-14T12:26:00",
        "sender": {
          "id": 1,
          "username": "current_user",
          "displayName": "Current User"
        }
      }
    ],
    "totalElements": 10,
    "totalPages": 1,
    "currentPage": 0,
    "size": 20,
    "first": true,
    "last": true,
    "empty": false
  }
}

================================================================================
                            5. GET UNREAD COUNT
================================================================================

METHOD: GET
ENDPOINT: /messages/unread-count

PURPOSE: Get total number of unread messages for current user

REQUEST:
GET /messages/unread-count

RESPONSE:
{
  "success": true,
  "data": {
    "unreadCount": 5
  }
}

================================================================================
                          6. MARK MESSAGE AS READ
================================================================================

METHOD: PUT
ENDPOINT: /messages/{messageId}/read

PURPOSE: Mark a specific message as read

REQUEST:
PUT /messages/5/read

RESPONSE:
{
  "success": true,
  "data": "Message marked as read"
}

================================================================================
                          COMPLETE MESSAGING WORKFLOW
================================================================================

STEP 1: SEARCH FOR A USER
GET /search/users?q=john
↓
STEP 2: SEND MESSAGE TO USER
POST /messages
{
  "recipientId": 2,
  "content": "Hello John!",
  "type": "TEXT"
}
↓
STEP 3: GET CONVERSATIONS LIST
GET /messages/conversations
↓
STEP 4: VIEW CONVERSATION MESSAGES
GET /messages/conversations/1
↓
STEP 5: MARK MESSAGES AS READ
PUT /messages/5/read

================================================================================
                              ADDITIONAL FEATURES
================================================================================

UPDATE MESSAGE:
PUT /messages/{messageId}
{
  "content": "Updated message content"
}

DELETE MESSAGE:
DELETE /messages/{messageId}

SEARCH OTHER CONTENT:
- Search discussions: GET /search/discussions?q=query
- Search groups: GET /search/groups?q=query

MESSAGE TYPES:
- TEXT: Plain text message
- IMAGE: Image attachment
- FILE: File attachment

================================================================================
                              JAVASCRIPT EXAMPLE
================================================================================

// Search for users
async function searchUsers(query) {
  const response = await fetch(`/api/v1/search/users?q=${query}`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  return response.json();
}

// Send message to user
async function sendMessage(recipientId, content) {
  const response = await fetch('/api/v1/messages', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      recipientId: recipientId,
      content: content,
      type: 'TEXT'
    })
  });
  return response.json();
}

// Get conversations
async function getConversations() {
  const response = await fetch('/api/v1/messages/conversations', {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  return response.json();
}

// Usage example
const users = await searchUsers('john');
const message = await sendMessage(users.data.content[0].id, 'Hello!');
const conversations = await getConversations();

================================================================================

This provides a complete user search and messaging flow for the EduConnect 
discussion service. Users can search for other users, start conversations,
send messages, and manage their conversations effectively.

================================================================================