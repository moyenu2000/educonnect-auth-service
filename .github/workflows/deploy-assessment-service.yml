name: Deploy Assessment Service

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # - name: Run tests
      #   run: ./mvnw test
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest ./assessment-service
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy to VM
        run: |
          gcloud compute scp docker-compose.prod.yml auth-service-vm:~/ --zone=us-central1-a
          
          gcloud compute ssh auth-service-vm --zone=us-central1-a --command='
            cat > .env << EOF
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          APP_BASE_URL=${{ secrets.APP_BASE_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          EOF
            
            # Remove existing container if it exists
            sudo docker stop educonnect-assessment-service 2>/dev/null || true
            sudo docker rm educonnect-assessment-service 2>/dev/null || true
            
            # Pull the latest image
            sudo docker-compose -f docker-compose.prod.yml --env-file .env pull assessment-service
            
            # Start the service with dependencies
            sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d postgres redis auth-service discussion-service assessment-service
            
            # Wait for service to start and show status
            sleep 30
            sudo docker-compose -f docker-compose.prod.yml --env-file .env ps assessment-service
          '