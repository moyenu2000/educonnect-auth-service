name: Deploy EduConnect Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Environment Variables
        run: |
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            echo "Error: DOCKER_HUB_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "Error: DB_PASSWORD secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "Error: JWT_SECRET secret is not set"
            exit 1
          fi
          echo "All required environment variables are set"

  # # Unit Testing for Auth Service only
  # test-auth:
  #   runs-on: ubuntu-latest
  #   needs: validate
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
          
  #     - name: Cache Maven dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2
          
  #     - name: Make Maven wrapper executable
  #       run: |
  #         chmod +x auth/mvnw
  #         chmod +x assessment-service/mvnw
  #         chmod +x discussion-service/mvnw
          
  #     - name: Run Auth Service Unit Tests
  #       run: |
  #         cd auth
  #         echo "Running unit tests for Auth Service..."
  #         ./mvnw clean test -Dspring.profiles.active=test
          
  #     - name: Generate Test Report
  #       run: |
  #         cd auth
  #         ./mvnw jacoco:report
          
  #     - name: Upload Test Results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: auth-test-results
  #         path: auth/target/surefire-reports/
          
  #     - name: Upload Coverage Reports
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: auth-coverage-report
  #         path: auth/target/site/jacoco/

  build-auth:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push Auth Service
        run: |
          echo "Building auth service (tests passed)..."
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/auth-service:latest ./auth
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/auth-service:latest

  build-discussion:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push Discussion Service
        run: |
          echo "Building discussion service (no tests configured)..."
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/discussion-service:latest ./discussion-service
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/discussion-service:latest

  build-assessment:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push Assessment Service
        run: |
          echo "Building assessment service (no tests configured)..."
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest ./assessment-service
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-auth, build-discussion, build-assessment]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy Infrastructure
        run: |
          gcloud compute scp docker-compose.prod.yml auth-service-vm:~/ --zone=us-central1-a
          gcloud compute scp scripts/cleanup.sh auth-service-vm:~/ --zone=us-central1-a
          gcloud compute scp init-db.sql auth-service-vm:~/ --zone=us-central1-a
          
          gcloud compute ssh auth-service-vm --zone=us-central1-a --command='
            # Clean up disk space
            sudo docker system prune -af --volumes
            sudo apt-get autoremove -y
            sudo apt-get autoclean
            
            # Create .env file
            cat > .env << EOF
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_USER=${{ secrets.DB_USER || 'postgres' }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          APP_BASE_URL=${{ secrets.APP_BASE_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          EOF
            
            # Make cleanup script executable
            chmod +x cleanup.sh
            
            # Run cleanup script
            ./cleanup.sh
            
            # Start infrastructure services
            echo "Starting infrastructure services..."
            sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d postgres redis
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              if sudo docker-compose -f docker-compose.prod.yml --env-file .env exec -T postgres pg_isready -U postgres -d educonnect; then
                echo "Database is ready!"
                break
              fi
              echo "Database not ready yet, waiting..."
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "Database failed to start within timeout"
              exit 1
            fi
            
            # Wait for Redis to be ready
            timeout=60
            while [ $timeout -gt 0 ]; do
              if sudo docker-compose -f docker-compose.prod.yml --env-file .env exec -T redis redis-cli ping | grep PONG; then
                echo "Redis is ready!"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
            done
            
            echo "Infrastructure ready!"
          '

  deploy-auth:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy Auth Service
        run: |
          gcloud compute ssh auth-service-vm --zone=us-central1-a --command='
            echo "Starting Auth Service..."
            sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d auth-service
            
            # Wait for Auth Service to be ready
            timeout=120
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:8081/api/v1/actuator/health >/dev/null 2>&1; then
                echo "Auth Service is ready!"
                exit 0
              fi
              echo "Auth Service not ready yet, waiting..."
              sleep 5
              timeout=$((timeout - 5))
            done
            echo "Auth Service failed to start"
            exit 1
          '

  deploy-discussion:
    runs-on: ubuntu-latest
    needs: deploy-auth
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy Discussion Service
        run: |
          gcloud compute ssh auth-service-vm --zone=us-central1-a --command='
            echo "Starting Discussion Service..."
            sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d discussion-service
            
            # Wait for Discussion Service to be ready
            timeout=120
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:8082/api/v1/actuator/health >/dev/null 2>&1; then
                echo "Discussion Service is ready!"
                exit 0
              fi
              echo "Discussion Service not ready yet, waiting..."
              sleep 5
              timeout=$((timeout - 5))
            done
            echo "Discussion Service failed to start"
            exit 1
          '

  deploy-assessment:
    runs-on: ubuntu-latest
    needs: deploy-discussion
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy Assessment Service
        run: |
          gcloud compute ssh auth-service-vm --zone=us-central1-a --command='
            echo "Starting Assessment Service..."
            sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d assessment-service
            
            # Wait for Assessment Service to be ready
            timeout=120
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:8083/api/v1/actuator/health >/dev/null 2>&1; then
                echo "Assessment Service is ready!"
                sudo docker-compose -f docker-compose.prod.yml --env-file .env ps
                exit 0
              fi
              echo "Assessment Service not ready yet, waiting..."
              sleep 5
              timeout=$((timeout - 5))
            done
            echo "Assessment Service failed to start"
            exit 1
          '