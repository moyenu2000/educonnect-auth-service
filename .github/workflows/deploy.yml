name: Deploy EduConnect Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to deploy (comma-separated: auth,discussion,assessment or "all")'
        required: true
        default: 'all'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # - name: Run tests
      #   run: ./mvnw test
      
      - name: Validate Environment Variables
        run: |
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            echo "Error: DOCKER_HUB_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "Error: DB_PASSWORD secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "Error: JWT_SECRET secret is not set"
            exit 1
          fi
          echo "All required environment variables are set"
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push Docker images
        run: |
          # Determine which services to build
          SERVICES="${{ github.event.inputs.services || 'all' }}"
          
          if [[ "$SERVICES" == "all" || "$SERVICES" == *"auth"* ]]; then
            echo "Building auth service..."
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/auth-service:latest ./auth
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/auth-service:latest
          fi
          
          if [[ "$SERVICES" == "all" || "$SERVICES" == *"discussion"* ]]; then
            echo "Building discussion service..."
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/discussion-service:latest ./discussion-service
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/discussion-service:latest
          fi
          
          if [[ "$SERVICES" == "all" || "$SERVICES" == *"assessment"* ]]; then
            echo "Building assessment service..."
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest ./assessment-service
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest
          fi
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy to VM
        run: |
          gcloud compute scp docker-compose.prod.yml auth-service-vm:~/ --zone=us-central1-a
          gcloud compute scp scripts/cleanup.sh auth-service-vm:~/ --zone=us-central1-a
          gcloud compute scp init-db.sql auth-service-vm:~/ --zone=us-central1-a
          
          gcloud compute ssh auth-service-vm --zone=us-central1-a --command='
            # Clean up disk space
            sudo docker system prune -af --volumes
            sudo apt-get autoremove -y
            sudo apt-get autoclean
            
            # Create .env file
            cat > .env << EOF
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_USER=${{ secrets.DB_USER || 'postgres' }}
          RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          RABBITMQ_USER=${{ secrets.RABBITMQ_USER || 'educonnect' }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          APP_BASE_URL=${{ secrets.APP_BASE_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD || 'admin' }}
          EOF
            
            # Make cleanup script executable
            chmod +x cleanup.sh
            
            # Run cleanup script
            ./cleanup.sh
            
            # Pull all images
            sudo docker-compose -f docker-compose.prod.yml --env-file .env pull
            
            # Step 1: Start infrastructure services first
            echo "Starting infrastructure services..."
            sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d postgres redis
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              if sudo docker-compose -f docker-compose.prod.yml --env-file .env exec -T postgres pg_isready -U postgres -d educonnect; then
                echo "Database is ready!"
                break
              fi
              echo "Database not ready yet, waiting..."
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "Database failed to start within timeout"
              sudo docker-compose -f docker-compose.prod.yml --env-file .env logs postgres
              exit 1
            fi
            
            # Verify database exists
            sudo docker-compose -f docker-compose.prod.yml --env-file .env exec -T postgres psql -U postgres -c "\l" | grep educonnect || {
              echo "Database educonnect not found, creating it..."
              sudo docker-compose -f docker-compose.prod.yml --env-file .env exec -T postgres psql -U postgres -c "CREATE DATABASE educonnect;"
            }
            
            # Wait for Redis to be ready
            echo "Waiting for Redis to be ready..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if sudo docker-compose -f docker-compose.prod.yml --env-file .env exec -T redis redis-cli ping | grep PONG; then
                echo "Redis is ready!"
                break
              fi
              echo "Redis not ready yet, waiting..."
              sleep 2
              timeout=$((timeout - 2))
            done
            
            # Determine which services to deploy
            SERVICES="${{ github.event.inputs.services || 'all' }}"
            echo "Deploying services: $SERVICES"
            
            # Step 2: Start Auth Service (foundational service)
            if [[ "$SERVICES" == "all" || "$SERVICES" == *"auth"* ]]; then
              echo "Starting Auth Service..."
              sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d auth-service
              
              # Wait for Auth Service to be healthy
              echo "Waiting for Auth Service to be ready..."
              timeout=120
              while [ $timeout -gt 0 ]; do
                if curl -f http://localhost:8081/api/actuator/health >/dev/null 2>&1; then
                  echo "Auth Service is ready!"
                  break
                fi
                echo "Auth Service not ready yet, waiting..."
                sleep 5
                timeout=$((timeout - 5))
              done
            else
              echo "Skipping Auth Service deployment"
            fi
            
            # Step 3: Start Discussion Service
            if [[ "$SERVICES" == "all" || "$SERVICES" == *"discussion"* ]]; then
              echo "Starting Discussion Service..."
              sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d discussion-service
              
              # Wait for Discussion Service to be ready
              echo "Waiting for Discussion Service to be ready..."
              timeout=120
              while [ $timeout -gt 0 ]; do
                if curl -f http://localhost:8082/actuator/health >/dev/null 2>&1; then
                  echo "Discussion Service is ready!"
                  break
                fi
                echo "Discussion Service not ready yet, waiting..."
                sleep 5
                timeout=$((timeout - 5))
              done
            else
              echo "Skipping Discussion Service deployment"
            fi
            
            # Step 4: Start Assessment Service (depends on everything)
            if [[ "$SERVICES" == "all" || "$SERVICES" == *"assessment"* ]]; then
              echo "Starting Assessment Service..."
              sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d assessment-service
              
              # Wait for Assessment Service to be ready
              echo "Waiting for Assessment Service to be ready..."
              timeout=120
              while [ $timeout -gt 0 ]; do
                if curl -f http://localhost:8084/api/v1/actuator/health >/dev/null 2>&1; then
                  echo "Assessment Service is ready!"
                  break
                fi
                echo "Assessment Service not ready yet, waiting..."
                sleep 5
                timeout=$((timeout - 5))
              done
            else
              echo "Skipping Assessment Service deployment"
            fi
            
            # Wait for services to start and show status
            sleep 30
            sudo docker-compose -f docker-compose.prod.yml --env-file .env ps
            
            # Check service health
            echo "Checking service health..."
            sudo docker-compose -f docker-compose.prod.yml --env-file .env logs auth-service | tail -20
          '