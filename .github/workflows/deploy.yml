name: Deploy EduConnect Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push all services
        run: |
          # Build auth service
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/auth-service:latest ./auth
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/auth-service:latest
          
          # Build discussion service
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/discussion-service:latest ./discussion-service
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/discussion-service:latest
          
          # Build assessment service
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest ./assessment-service
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/assessment-service:latest
          
          # Build frontend
          cd frontend
          npm ci
          cat > .env << EOF
          VM_IP=${{ secrets.VM_IP }}
          VITE_VM_IP=${{ secrets.VM_IP }}
          VITE_API_BASE_URL=http://${{ secrets.VM_IP }}
          EOF
          npm run build:production
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/educonnect-frontend:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/educonnect-frontend:latest
          
      - name: Setup Google Cloud CLI and Deploy
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy to VM
        run: |
          gcloud compute scp docker-compose.prod.yml auth-service-vm:~/ --zone=us-central1-a
          gcloud compute scp scripts/cleanup.sh auth-service-vm:~/ --zone=us-central1-a
          gcloud compute scp educonnect-init-db.sql auth-service-vm:~/ --zone=us-central1-a
          
          gcloud compute ssh auth-service-vm --zone=us-central1-a --command='
            # Clean up and prepare environment
            sudo docker system prune -af --volumes
            
            # Create .env file
            cat > .env << EOF
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          AUTH_URL=${{ secrets.AUTH_URL }}
          ASSESSMENT_URL=${{ secrets.ASSESSMENT_URL }}
          DISCUSSION_URL=${{ secrets.DISCUSSION_URL }}
          FILE_BASE_URL=${{ secrets.FILE_BASE_URL }}
          AUTH_SERVICE_PORT=${{ secrets.AUTH_SERVICE_PORT }}
          DISCUSSION_SERVICE_PORT=${{ secrets.DISCUSSION_SERVICE_PORT }}
          ASSESSMENT_SERVICE_PORT=${{ secrets.ASSESSMENT_SERVICE_PORT }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          SERVER_CONTEXT_PATH=${{ secrets.SERVER_CONTEXT_PATH }}
          SPRING_RABBITMQ_HOST=${{ secrets.SPRING_RABBITMQ_HOST }}
          SPRING_RABBITMQ_PORT=${{ secrets.SPRING_RABBITMQ_PORT }}
          SPRING_RABBITMQ_USERNAME=${{ secrets.SPRING_RABBITMQ_USERNAME }}
          SPRING_RABBITMQ_PASSWORD=${{ secrets.SPRING_RABBITMQ_PASSWORD }}
          VITE_AUTH_URL=${{ secrets.AUTH_URL }}
          VITE_ASSESSMENT_URL=${{ secrets.ASSESSMENT_URL }}
          VITE_DISCUSSION_URL=${{ secrets.DISCUSSION_URL }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          EOF
            
            # Make cleanup script executable and run
            chmod +x cleanup.sh
            ./cleanup.sh
            
            # Deploy all services
            sudo docker-compose -f docker-compose.prod.yml --env-file .env up -d
            
            # Simple health check
            sleep 30
            echo "Deployment completed. Services status:"
            sudo docker-compose -f docker-compose.prod.yml --env-file .env ps
          '