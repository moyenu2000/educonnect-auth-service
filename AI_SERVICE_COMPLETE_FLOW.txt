================================================================================
                        AI SERVICE COMPLETE REQUEST/RESPONSE FLOW
================================================================================

OVERVIEW
========
The AI service integrates with Google Gemini API to provide educational assistance
to students. It supports concept explanations, problem solving, detailed explanations,
and homework guidance with intelligent response processing and history tracking.

SERVICE DETAILS
===============
- Base URL: http://localhost:8082/api/v1
- Authentication: JWT Bearer token required
- Role Required: STUDENT
- AI Provider: Google Gemini 1.5 Flash
- Database: PostgreSQL (discussion schema)

================================================================================
                                  ENDPOINTS
================================================================================

1. ASK AI QUESTION
==================
Method: POST
URL: /api/v1/ai/ask
Authentication: Required (STUDENT role)
Content-Type: application/json

REQUEST BODY STRUCTURE:
{
  "question": "string (required)",     // The question to ask AI
  "type": "string (required)",         // CONCEPT, PROBLEM, EXPLANATION, HOMEWORK
  "subjectId": "number (optional)",    // Subject ID for context
  "topicId": "number (optional)",      // Topic ID for context
  "context": "string (optional)"       // Additional context information
}

VALIDATION RULES:
- question: Not blank, required
- type: Not null, must be one of: CONCEPT, PROBLEM, EXPLANATION, HOMEWORK
- subjectId: Optional, must be valid number if provided
- topicId: Optional, must be valid number if provided
- context: Optional, can be any string

EXAMPLE REQUEST:
POST /api/v1/ai/ask
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json

{
  "question": "What is the derivative of x^2?",
  "type": "CONCEPT",
  "subjectId": 1,
  "topicId": 5,
  "context": "I'm studying calculus and need help understanding derivatives"
}

RESPONSE STRUCTURE:
{
  "success": true,
  "data": {
    "answer": "string",                    // AI generated answer
    "sources": ["string"],                 // Array of source references
    "confidence": 0.9,                     // Confidence score (0.0 - 1.0)
    "followUpQuestions": ["string"]        // Suggested follow-up questions
  },
  "message": null,
  "error": null
}

EXAMPLE RESPONSE:
{
  "success": true,
  "data": {
    "answer": "The derivative of x^2 is 2x. This is found using the power rule: if f(x) = x^n, then f'(x) = n·x^(n-1). So for x^2, we get 2·x^(2-1) = 2x. The derivative represents the rate of change of the function at any given point.",
    "sources": [
      "Gemini AI - Concept Explanation",
      "Educational Standards Database",
      "Academic Reference Materials"
    ],
    "confidence": 0.9,
    "followUpQuestions": [
      "Would you like me to explain any specific part in more detail?",
      "Are there related concepts you'd like to explore?",
      "Would you like to see some practice examples?"
    ]
  },
  "message": null,
  "error": null
}

2. GET AI HISTORY
=================
Method: GET
URL: /api/v1/ai/history
Authentication: Required (STUDENT role)

QUERY PARAMETERS:
- page: integer (default: 0) - Page number for pagination
- size: integer (default: 20) - Number of items per page
- subjectId: integer (optional) - Filter by specific subject

EXAMPLE REQUEST:
GET /api/v1/ai/history?page=0&size=10&subjectId=1
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

RESPONSE STRUCTURE:
{
  "success": true,
  "data": {
    "content": [
      {
        "id": "number",                    // Unique query ID
        "question": "string",              // Original question
        "answer": "string",                // AI response
        "type": "string",                  // Query type
        "subjectId": "number",             // Subject ID
        "topicId": "number",               // Topic ID
        "context": "string",               // Additional context
        "confidence": "number",            // Confidence score
        "sources": ["string"],             // Source references
        "createdAt": "ISO datetime"        // Creation timestamp
      }
    ],
    "totalElements": "number",             // Total number of records
    "totalPages": "number",                // Total number of pages
    "currentPage": "number",               // Current page number
    "size": "number",                      // Page size
    "first": "boolean",                    // Is first page
    "last": "boolean",                     // Is last page
    "empty": "boolean"                     // Is empty result
  },
  "message": null,
  "error": null
}

EXAMPLE RESPONSE:
{
  "success": true,
  "data": {
    "content": [
      {
        "id": 1,
        "question": "What is the derivative of x^2?",
        "answer": "The derivative of x^2 is 2x...",
        "type": "CONCEPT",
        "subjectId": 1,
        "topicId": 5,
        "context": "I'm studying calculus and need help understanding derivatives",
        "confidence": 0.9,
        "sources": [
          "Gemini AI - Concept Explanation",
          "Educational Standards Database",
          "Academic Reference Materials"
        ],
        "createdAt": "2025-07-14T12:30:00"
      },
      {
        "id": 2,
        "question": "Solve: 2x + 5 = 15",
        "answer": "To solve 2x + 5 = 15, first subtract 5 from both sides...",
        "type": "PROBLEM",
        "subjectId": 1,
        "topicId": 3,
        "context": "Linear equations homework",
        "confidence": 0.85,
        "sources": [
          "Gemini AI - Problem Solving",
          "Mathematical Reference Guide",
          "Step-by-Step Solution Methods"
        ],
        "createdAt": "2025-07-14T11:15:00"
      }
    ],
    "totalElements": 25,
    "totalPages": 3,
    "currentPage": 0,
    "size": 10,
    "first": true,
    "last": false,
    "empty": false
  }
}

================================================================================
                              PROCESSING FLOW
================================================================================

INTERNAL AI REQUEST PROCESSING:
1. Request Validation
   - Validate JWT token and extract user information
   - Check user has STUDENT role
   - Validate required fields (question, type)
   - Sanitize input data

2. User Synchronization
   - Extract user ID from JWT token
   - Call UserSyncService to get or create user record
   - Ensure user exists in discussion service database

3. Prompt Building
   - Build context-aware prompt based on query type
   - Add subject-specific guidance if subjectId provided
   - Include additional context if provided

4. Gemini API Integration
   - Create GeminiRequest with formatted prompt
   - Send HTTP POST to Gemini API endpoint
   - Handle API response and extract generated content
   - Apply 30-second timeout for API calls

5. Response Processing
   - Parse Gemini API response
   - Calculate confidence score based on response quality
   - Generate relevant sources based on query type
   - Create follow-up questions based on query type

6. Database Storage
   - Create AIQuery entity with all request/response data
   - Save to database for history tracking
   - Link to user record for personalization

7. Response Generation
   - Format AIQueryResponse with processed data
   - Wrap in standard ApiResponse format
   - Return to client

QUERY TYPE-SPECIFIC PROMPT TEMPLATES:
- CONCEPT: "Please explain the following concept in a clear and educational way: {question}"
- PROBLEM: "Please help solve this problem step by step: {question}"
- EXPLANATION: "Please provide a detailed explanation for: {question}"
- HOMEWORK: "Please provide guidance for this homework question: {question}"

CONFIDENCE CALCULATION ALGORITHM:
- Response length < 20 characters → Confidence: 0.3
- Response length > 100 characters AND contains key terms → Confidence: 0.9
- Response length > 50 characters → Confidence: 0.75
- Default case → Confidence: 0.6

SOURCE GENERATION BY TYPE:
CONCEPT Type:
- "Gemini AI - Concept Explanation"
- "Educational Standards Database"
- "Academic Reference Materials"

PROBLEM Type:
- "Gemini AI - Problem Solving"
- "Mathematical Reference Guide"
- "Step-by-Step Solution Methods"

HOMEWORK Type:
- "Gemini AI - Educational Assistance"
- "Study Guide Resources"
- "Homework Help Database"

Default Type:
- "Gemini AI - General Knowledge"
- "Educational Resource Library"
- "Academic Support Materials"

FOLLOW-UP QUESTIONS BY TYPE:
CONCEPT Type:
- "Would you like me to explain any specific part in more detail?"
- "Are there related concepts you'd like to explore?"
- "Would you like to see some practice examples?"

PROBLEM Type:
- "Would you like to try a similar problem?"
- "Do you need clarification on any of the steps?"
- "Would you like to see alternative solution methods?"

Default Type:
- "Is there anything specific you'd like me to clarify?"
- "Would you like more examples?"
- "Do you have any related questions?"

================================================================================
                           CONFIGURATION DETAILS
================================================================================

APPLICATION PROPERTIES (discussion-service):
app.gemini.api-key=AIzaSyDedz-JY1RT3Oj8T8M76r_cFQXnQbhafto
app.gemini.api-url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent

GEMINI API CONFIGURATION:
- Model: gemini-1.5-flash-latest
- Timeout: 30 seconds
- Content Type: application/json
- Authentication: API key via query parameter

DATABASE SCHEMA (discussion schema):
Table: ai_queries
- id: BIGINT (Primary Key, Auto-increment)
- question: TEXT (Not Null)
- answer: TEXT (Not Null)
- type: VARCHAR(50) (Not Null)
- subject_id: BIGINT (Nullable)
- topic_id: BIGINT (Nullable)
- context: TEXT (Nullable)
- confidence: DOUBLE (Not Null)
- user_id: BIGINT (Foreign Key, Not Null)
- created_at: TIMESTAMP (Not Null, Auto-generated)

Table: ai_query_sources
- ai_query_id: BIGINT (Foreign Key)
- source: VARCHAR(255)

INDEXES:
- idx_ai_query_user ON ai_queries(user_id)
- idx_ai_query_subject ON ai_queries(subject_id)
- idx_ai_query_created ON ai_queries(created_at)

================================================================================
                              ERROR HANDLING
================================================================================

AUTHENTICATION ERRORS:
Status: 401 Unauthorized
Response:
{
  "success": false,
  "data": null,
  "message": "Authentication required",
  "error": "JWT token missing or invalid"
}

AUTHORIZATION ERRORS:
Status: 403 Forbidden
Response:
{
  "success": false,
  "data": null,
  "message": "Access denied",
  "error": "STUDENT role required"
}

VALIDATION ERRORS:
Status: 400 Bad Request
Response:
{
  "success": false,
  "data": null,
  "message": "Validation failed",
  "error": "Question is required"
}

GEMINI API ERRORS:
When Gemini API fails, service returns fallback response:
{
  "success": true,
  "data": {
    "answer": "I apologize, but I'm currently unable to process your request. Please try again later or contact your instructor for assistance with: {question}",
    "sources": ["System Fallback Response"],
    "confidence": 0.1,
    "followUpQuestions": [
      "Would you like to try rephrasing your question?",
      "Do you need help with a different topic?"
    ]
  }
}

INTERNAL SERVER ERRORS:
Status: 500 Internal Server Error
Response:
{
  "success": false,
  "data": null,
  "message": "Internal server error",
  "error": "An unexpected error occurred"
}

================================================================================
                              USAGE EXAMPLES
================================================================================

CURL EXAMPLES:

1. ASK CONCEPT QUESTION:
curl -X POST http://localhost:8082/api/v1/ai/ask \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." \
  -H "Content-Type: application/json" \
  -d '{
    "question": "What is photosynthesis?",
    "type": "CONCEPT",
    "subjectId": 2,
    "context": "Learning about plant biology"
  }'

2. ASK PROBLEM SOLVING:
curl -X POST http://localhost:8082/api/v1/ai/ask \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." \
  -H "Content-Type: application/json" \
  -d '{
    "question": "Solve the equation: 3x - 7 = 2x + 5",
    "type": "PROBLEM",
    "subjectId": 1,
    "topicId": 3,
    "context": "Algebra homework problem"
  }'

3. ASK EXPLANATION:
curl -X POST http://localhost:8082/api/v1/ai/ask \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." \
  -H "Content-Type: application/json" \
  -d '{
    "question": "Why does water expand when it freezes?",
    "type": "EXPLANATION",
    "subjectId": 3
  }'

4. ASK HOMEWORK HELP:
curl -X POST http://localhost:8082/api/v1/ai/ask \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." \
  -H "Content-Type: application/json" \
  -d '{
    "question": "How do I write a thesis statement for an essay about climate change?",
    "type": "HOMEWORK",
    "subjectId": 4,
    "context": "English composition assignment"
  }'

5. GET AI HISTORY (FIRST PAGE):
curl -X GET "http://localhost:8082/api/v1/ai/history?page=0&size=10" \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

6. GET AI HISTORY (FILTERED BY SUBJECT):
curl -X GET "http://localhost:8082/api/v1/ai/history?page=0&size=20&subjectId=1" \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

JAVASCRIPT/FETCH EXAMPLES:

1. ASK AI QUESTION:
const response = await fetch('http://localhost:8082/api/v1/ai/ask', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${jwtToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    question: "What is the quadratic formula?",
    type: "CONCEPT",
    subjectId: 1,
    context: "Studying quadratic equations"
  })
});

const data = await response.json();
console.log(data.data.answer);

2. GET AI HISTORY:
const response = await fetch('http://localhost:8082/api/v1/ai/history?page=0&size=10', {
  method: 'GET',
  headers: {
    'Authorization': `Bearer ${jwtToken}`
  }
});

const historyData = await response.json();
console.log(historyData.data.content);

================================================================================
                            INTEGRATION NOTES
================================================================================

FRONTEND INTEGRATION:
1. Obtain JWT token from auth service login
2. Store token securely (localStorage/sessionStorage)
3. Include token in Authorization header for all AI requests
4. Handle loading states during AI processing (30-second timeout)
5. Display AI responses with proper formatting
6. Show confidence scores and sources to users
7. Implement follow-up question suggestions as clickable options

SECURITY CONSIDERATIONS:
1. All requests require valid JWT authentication
2. User can only access their own AI history
3. Input validation prevents injection attacks
4. Rate limiting should be implemented at API gateway level
5. Gemini API key is securely stored in environment variables
6. Database queries use parameterized statements

PERFORMANCE OPTIMIZATION:
1. Implement caching for frequently asked questions
2. Use database indexes for efficient history queries
3. Consider implementing request queue for high traffic
4. Monitor Gemini API usage and costs
5. Implement graceful degradation when AI service is unavailable

MONITORING AND LOGGING:
1. Log all AI requests and responses for analytics
2. Monitor Gemini API response times and success rates
3. Track user engagement with AI features
4. Alert on high error rates or API failures
5. Monitor database performance for history queries

================================================================================
                              END OF DOCUMENT
================================================================================

This document provides complete implementation details for the AI service
request/response flow in the EduConnect platform. The service integrates
Google Gemini AI to provide educational assistance with comprehensive
history tracking and intelligent response processing.

For technical support or additional information, refer to the source code
in the discussion-service module or contact the development team.

Last Updated: 2025-07-14
Version: 1.0
Service: EduConnect Discussion Service AI Module